package com.banque.pret.ejb.impl;

import com.banque.pret.dto.EcheanceDTO;
import com.banque.pret.dto.RemboursementDTO;
import com.banque.pret.ejb.remote.EcheanceServiceRemote;
import com.banque.pret.entity.Echeance;
import com.banque.pret.entity.Pret;
import com.banque.pret.entity.Remboursement;
import com.banque.pret.entity.enums.StatutEcheance;
import com.banque.pret.entity.enums.StatutPret;
import com.banque.pret.entity.enums.TypePaiement;
import com.banque.pret.mapper.EcheanceMapper;
import com.banque.pret.mapper.RemboursementMapper;
import com.banque.pret.repository.EcheanceRepository;
import com.banque.pret.repository.PretRepository;
import com.banque.pret.repository.RemboursementRepository;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * PHASE 5 : Impl√©mentation du service √©ch√©ance et remboursement
 */
@Stateless
public class EcheanceServiceImpl implements EcheanceServiceRemote {

    private static final Logger LOGGER = Logger.getLogger(EcheanceServiceImpl.class.getName());
    private static final int DELAI_TOLERANCE = 5; // 5 jours de d√©lai de tol√©rance

    @Inject
    private EcheanceRepository echeanceRepository;

    @Inject
    private RemboursementRepository remboursementRepository;

    @Inject
    private PretRepository pretRepository;

    @Override
    public List<EcheanceDTO> obtenirTableauAmortissement(Long idPret) {
        LOGGER.info("R√©cup√©ration du tableau d'amortissement pour le pr√™t: " + idPret);

        List<Echeance> echeances = echeanceRepository.findByPretId(idPret);

        return echeances.stream()
                .map(EcheanceMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public EcheanceDTO rechercherEcheanceParId(Long idEcheance) {
        LOGGER.info("Recherche de l'√©ch√©ance par ID: " + idEcheance);

        Optional<Echeance> echeance = echeanceRepository.findById(idEcheance);
        return echeance.map(EcheanceMapper::toDTO).orElse(null);
    }

    @Override
    public RemboursementDTO enregistrerRemboursement(RemboursementDTO remboursementDTO) {
        LOGGER.info("üí∞ PHASE 5 : GESTION DES REMBOURSEMENTS - Montant: " + remboursementDTO.getMontantPaye());

        try {
            // Validation
            if (remboursementDTO.getIdPret() == null || remboursementDTO.getMontantPaye() == null) {
                throw new IllegalArgumentException("Le pr√™t et le montant sont obligatoires");
            }

            if (remboursementDTO.getMontantPaye().compareTo(BigDecimal.ZERO) <= 0) {
                throw new IllegalArgumentException("Le montant doit √™tre sup√©rieur √† z√©ro");
            }

            // R√©cup√©ration du pr√™t
            Optional<Pret> pretOpt = pretRepository.findById(remboursementDTO.getIdPret());
            if (pretOpt.isEmpty()) {
                throw new IllegalArgumentException("Pr√™t non trouv√©");
            }
            Pret pret = pretOpt.get();

            // R√àGLE : R√©cup√©rer toutes les √©ch√©ances impay√©es du pr√™t, tri√©es par date
            List<Echeance> echeancesImpayees = echeanceRepository.findByPretId(remboursementDTO.getIdPret())
                    .stream()
                    .filter(e -> e.getStatut() != StatutEcheance.PAYE
                            && e.getStatut() != StatutEcheance.PAYE_AVEC_RETARD)
                    .sorted(Comparator.comparing(Echeance::getNumeroEcheance))
                    .collect(Collectors.toList());

            if (echeancesImpayees.isEmpty()) {
                throw new IllegalStateException("‚ùå Aucune √©ch√©ance impay√©e trouv√©e pour ce pr√™t");
            }

            BigDecimal montantRestant = remboursementDTO.getMontantPaye();
            LocalDate dateRemboursement = LocalDate.now();
            List<Echeance> echeancesTraitees = new ArrayList<>();
            List<Remboursement> remboursementsCrees = new ArrayList<>();

            LOGGER.info("üìã Traitement de " + echeancesImpayees.size() + " √©ch√©ances impay√©es");

            for (Echeance echeance : echeancesImpayees) {
                if (montantRestant.compareTo(BigDecimal.ZERO) <= 0) {
                    break; // Plus de montant √† distribuer
                }

                BigDecimal montantEcheance = echeance.getMontantEcheance();
                BigDecimal montantAPayer = montantRestant.min(montantEcheance);

                // R√àGLE : Calcul des p√©nalit√©s en cas de retard
                BigDecimal penaliteAppliquee = BigDecimal.ZERO;
                long joursRetard = ChronoUnit.DAYS.between(echeance.getDateEcheance(), dateRemboursement);

                // P√©nalit√©s d√©sactiv√©es pour l'instant
                /*
                 * if (joursRetard > DELAI_TOLERANCE) {
                 * penaliteAppliquee = montantEcheance
                 * .multiply(BigDecimal.valueOf(0.0005))
                 * .multiply(BigDecimal.valueOf(joursRetard - DELAI_TOLERANCE))
                 * .setScale(2, RoundingMode.HALF_UP);
                 * }
                 */

                // G√©n√©ration d'un num√©ro de transaction s√©curis√©
                String numeroTransaction = "TXN-" + System.currentTimeMillis() + "-" +
                        ThreadLocalRandom.current().nextInt(1000, 9999);

                TypePaiement typePaiement = remboursementDTO.getTypePaiement();
                if (typePaiement == null) {
                    typePaiement = TypePaiement.ESPECES; // Valeur par d√©faut
                    LOGGER.info("‚ö†Ô∏è Type de paiement non sp√©cifi√©, utilisation de la valeur par d√©faut: VIREMENT");
                }

                // Cr√©ation du remboursement
                Remboursement remboursement = Remboursement.builder()
                        .echeance(echeance)
                        .montant(montantAPayer)
                        .montantEcheance(montantAPayer)
                        .montantPenalite(BigDecimal.ZERO)
                        .datePaiement(LocalDateTime.now())
                        .idCompte(remboursementDTO.getIdCompte())
                        .typePaiement(typePaiement)
                        .numeroTransaction(numeroTransaction) // G√©n√©r√© automatiquement pour √©viter les doublons
                        .build();

                // SAUVEGARDE S√âCURIS√âE avec gestion d'erreur
                try {
                    LOGGER.info("üíæ Sauvegarde du remboursement - √âch√©ance: " + echeance.getNumeroEcheance() +
                            ", Montant: " + montantAPayer);

                    Remboursement remboursementCree = remboursementRepository.save(remboursement);
                    remboursementsCrees.add(remboursementCree);

                    LOGGER.info("‚úÖ Remboursement sauvegard√© avec ID: " + remboursementCree.getIdRemboursement());

                } catch (Exception e) {
                    LOGGER.severe("‚ùå ERREUR lors de la sauvegarde du remboursement: " + e.getMessage());
                    LOGGER.severe("‚ùå D√©tails de l'erreur: " + e.getClass().getName());

                    // Convertir l'exception technique en exception m√©tier
                    if (e.getMessage() != null && e.getMessage().toLowerCase().contains("constraint")) {
                        throw new IllegalStateException(
                                "Erreur de contrainte base de donn√©es. V√©rifiez l'int√©grit√© des donn√©es.");
                    } else if (e.getMessage() != null && e.getMessage().toLowerCase().contains("foreign")) {
                        throw new IllegalStateException(
                                "R√©f√©rence invalide. L'√©ch√©ance n'existe pas ou a √©t√© supprim√©e.");
                    } else {
                        throw new IllegalStateException("Erreur technique lors de l'enregistrement: " + e.getMessage());
                    }
                }

                // R√àGLE : Mise √† jour du statut de l'√©ch√©ance
                if (montantAPayer.compareTo(montantEcheance) >= 0) {
                    // Paiement complet
                    if (joursRetard > DELAI_TOLERANCE) {
                        echeance.setStatut(StatutEcheance.PAYE_AVEC_RETARD);
                        LOGGER.info("‚úÖ √âch√©ance " + echeance.getNumeroEcheance() + " pay√©e avec retard (" + joursRetard
                                + " jours)");
                    } else {
                        echeance.setStatut(StatutEcheance.PAYE);
                        LOGGER.info("‚úÖ √âch√©ance " + echeance.getNumeroEcheance() + " pay√©e √† temps");
                    }
                    echeance.setDatePaiement(dateRemboursement);
                    echeance.setPenaliteAppliquee(BigDecimal.ZERO);
                    echeance.setJoursRetard((int) Math.max(0, joursRetard));

                    echeancesTraitees.add(echeance);
                    montantRestant = montantRestant.subtract(montantEcheance);
                } else {
                    // Paiement partiel
                    LOGGER.info("‚ö†Ô∏è Paiement partiel de " + montantAPayer + " sur l'√©ch√©ance " +
                            echeance.getNumeroEcheance() + " (reste: " + montantEcheance.subtract(montantAPayer) + ")");
                    montantRestant = BigDecimal.ZERO; // On s'arr√™te l√†
                }

                // Mise √† jour s√©curis√©e de l'√©ch√©ance
                try {
                    echeanceRepository.update(echeance);
                    LOGGER.info("üìù Statut √©ch√©ance " + echeance.getNumeroEcheance() + " mis √† jour: "
                            + echeance.getStatut());
                } catch (Exception e) {
                    LOGGER.severe("‚ùå ERREUR lors de la mise √† jour de l'√©ch√©ance: " + e.getMessage());
                    throw new IllegalStateException("Erreur lors de la mise √† jour du statut de l'√©ch√©ance");
                }
            }

            // V√©rifier s'il reste du montant non utilis√©
            if (montantRestant.compareTo(BigDecimal.ZERO) > 0) {
                LOGGER.info("üí∞ Montant non utilis√©: " + montantRestant + " - Toutes les √©ch√©ances sont pay√©es");
            }

            // R√àGLE : V√©rifier si toutes les √©ch√©ances sont pay√©es => Pr√™t TERMINE
            verifierEtatPret(pret);

            LOGGER.info("üéâ PHASE 5 termin√©e - " + echeancesTraitees.size() +
                    " √©ch√©ances trait√©es, " + remboursementsCrees.size() + " remboursements cr√©√©s");

            // Retourner le premier remboursement cr√©√©
            if (remboursementsCrees.isEmpty()) {
                throw new IllegalStateException("Aucun remboursement n'a pu √™tre cr√©√©");
            }

            return RemboursementMapper.toDTO(remboursementsCrees.get(0));

        } catch (IllegalArgumentException | IllegalStateException e) {
            // Relancer les exceptions m√©tier avec un message clair
            LOGGER.warning("‚ö†Ô∏è Erreur m√©tier lors du remboursement: " + e.getMessage());
            throw e;

        } catch (Exception e) {
            // Capturer toutes les autres exceptions techniques
            LOGGER.severe("üí• ERREUR TECHNIQUE inattendue lors du remboursement: " + e.getMessage());
            LOGGER.severe("üí• Type d'erreur: " + e.getClass().getName());

            // Journalisation compl√®te pour le d√©bogage
            if (e.getCause() != null) {
                LOGGER.severe("üí• Cause: " + e.getCause().getMessage());
            }

            throw new IllegalStateException(
                    "Une erreur technique est survenue lors du traitement de votre remboursement. Veuillez r√©essayer.");
        }
    }

    @Override
    public List<RemboursementDTO> listerRemboursementsParEcheance(Long idEcheance) {
        LOGGER.info("R√©cup√©ration des remboursements de l'√©ch√©ance: " + idEcheance);

        List<Remboursement> remboursements = remboursementRepository.findByEcheanceId(idEcheance);

        return remboursements.stream()
                .map(RemboursementMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public List<RemboursementDTO> listerRemboursementsParPret(Long idPret) {
        LOGGER.info("R√©cup√©ration des remboursements du pr√™t: " + idPret);

        List<Remboursement> remboursements = remboursementRepository.findByPretId(idPret);

        return remboursements.stream()
                .map(RemboursementMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public List<EcheanceDTO> listerEcheancesImpayees(Long idPret) {
        LOGGER.info("R√©cup√©ration des √©ch√©ances impay√©es du pr√™t: " + idPret);

        List<Echeance> echeancesAVenir = echeanceRepository.findByPretIdAndStatut(idPret, StatutEcheance.A_VENIR);
        List<Echeance> echeancesEnRetard = echeanceRepository.findByPretIdAndStatut(idPret, StatutEcheance.EN_RETARD);
        List<Echeance> echeancesAujourdhui = echeanceRepository.findByPretIdAndStatut(idPret,
                StatutEcheance.ECHEANCE_AUJOURDHUI);

        List<Echeance> toutesEcheances = new ArrayList<>();
        toutesEcheances.addAll(echeancesAVenir);
        toutesEcheances.addAll(echeancesEnRetard);
        toutesEcheances.addAll(echeancesAujourdhui);

        return toutesEcheances.stream()
                .map(EcheanceMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public List<EcheanceDTO> listerEcheancesEnRetard() {
        LOGGER.info("R√©cup√©ration de toutes les √©ch√©ances en retard");

        List<Echeance> echeances = echeanceRepository.findEcheancesEnRetard();

        return echeances.stream()
                .map(EcheanceMapper::toDTO)
                .collect(Collectors.toList());
    }

    /**
     * PHASE 5 : V√©rification mensuelle des √©ch√©ances et mise √† jour des statuts
     * Cette m√©thode doit √™tre appel√©e quotidiennement par un scheduler
     */
    public void verifierEcheancesMensuelles() {
        LOGGER.info("PHASE 5 : V√©rification mensuelle des √©ch√©ances");

        LocalDate aujourdhui = LocalDate.now();

        // R√©cup√©ration de toutes les √©ch√©ances non pay√©es
        List<Echeance> toutesEcheances = echeanceRepository.findAll()
                .stream()
                .filter(e -> e.getStatut() == StatutEcheance.A_VENIR ||
                        e.getStatut() == StatutEcheance.ECHEANCE_AUJOURDHUI ||
                        e.getStatut() == StatutEcheance.EN_RETARD)
                .collect(Collectors.toList());

        for (Echeance echeance : toutesEcheances) {
            LocalDate dateEcheance = echeance.getDateEcheance();
            long joursRetard = ChronoUnit.DAYS.between(dateEcheance, aujourdhui);

            if (aujourdhui.isEqual(dateEcheance)) {
                // R√àGLE : Date d'√©ch√©ance = aujourd'hui
                echeance.setStatut(StatutEcheance.ECHEANCE_AUJOURDHUI);
                echeanceRepository.update(echeance);
                LOGGER.info("üìÖ √âch√©ance " + echeance.getPret().getNumeroPret() +
                        "-" + echeance.getNumeroEcheance() + " √©chue aujourd'hui");

            } else if (joursRetard > DELAI_TOLERANCE && echeance.getStatut() != StatutEcheance.EN_RETARD) {
                // R√àGLE : Paiement partiel/aucun => EN_RETARD apr√®s d√©lai de tol√©rance
                echeance.setStatut(StatutEcheance.EN_RETARD);
                echeance.setJoursRetard((int) joursRetard);
                echeanceRepository.update(echeance);

                // Mettre √† jour le statut du pr√™t
                Pret pret = echeance.getPret();
                if (pret.getStatut() == StatutPret.EN_COURS) {
                    pret.setStatut(StatutPret.EN_RETARD);
                    pretRepository.update(pret);
                }

                LOGGER.warning("‚ö†Ô∏è √âch√©ance " + echeance.getPret().getNumeroPret() +
                        "-" + echeance.getNumeroEcheance() + " en retard de " + joursRetard + " jours");
            }
        }
    }

    /**
     * PHASE 5 : V√©rifie l'√©tat du pr√™t et met √† jour son statut si toutes les
     * √©ch√©ances sont pay√©es
     */
    private void verifierEtatPret(Pret pret) {
        List<Echeance> echeances = echeanceRepository.findByPretId(pret.getIdPret());

        boolean toutesPayees = echeances.stream()
                .allMatch(e -> e.getStatut() == StatutEcheance.PAYE ||
                        e.getStatut() == StatutEcheance.PAYE_AVEC_RETARD);

        if (toutesPayees) {
            // R√àGLE : Toutes les √©ch√©ances pay√©es => Pr√™t TERMINE
            pret.setStatut(StatutPret.TERMINE);
            pretRepository.update(pret);
            LOGGER.info("üéâ Pr√™t " + pret.getNumeroPret() + " TERMIN√â - Toutes les √©ch√©ances sont pay√©es");
        } else {
            // V√©rifier s'il y a des retards
            boolean aDesRetards = echeances.stream()
                    .anyMatch(e -> e.getStatut() == StatutEcheance.EN_RETARD);

            if (aDesRetards && pret.getStatut() != StatutPret.EN_RETARD) {
                pret.setStatut(StatutPret.EN_RETARD);
                pretRepository.update(pret);
                LOGGER.warning("‚ö†Ô∏è Pr√™t " + pret.getNumeroPret() + " EN_RETARD");
            } else if (!aDesRetards && pret.getStatut() == StatutPret.EN_RETARD) {
                pret.setStatut(StatutPret.EN_COURS);
                pretRepository.update(pret);
                LOGGER.info("‚úÖ Pr√™t " + pret.getNumeroPret() + " de nouveau EN_COURS");
            }
        }
    }
}
